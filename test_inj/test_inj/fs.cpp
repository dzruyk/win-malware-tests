#include <Windows.h>

#include "common.h"
#include "fs.h"
#include "log.h"
#include "str.h"
#include "test_inj.h"
#include "utils.h"

HANDLE
file_open(wchar_t *path, int flags, int attr)
{
	int access = 0;
	int share = 0;
	int cd = 0;
	int winattr = 0;

	if (flags & WO_READ)
		access |= GENERIC_READ;
	if (flags & WO_WRITE)
		access |= GENERIC_WRITE;
	if (flags & WO_EXEC)
		access |= GENERIC_EXECUTE;
	if (flags & WO_CREAT)
		cd |= CREATE_ALWAYS;
	if (flags & WO_EXCL)
		cd |= OPEN_EXISTING;
	if (flags & WO_SHARE_R)
		share |= FILE_SHARE_READ;

	if (attr & MOD_HIDDEN)
		winattr |= FILE_ATTRIBUTE_HIDDEN;
	if (attr & MOD_SYSTEM)
		winattr |= FILE_ATTRIBUTE_SYSTEM;
	if (attr & MOD_READONLY)
		winattr |= FILE_ATTRIBUTE_READONLY;
	
	return CreateFile(path, //
	    access, //desired access
	    share, //share mode
	    NULL, //sec attributes
	    cd, //creation disp
	    winattr, //flags and attributes
	    NULL); //template file
}

bool
file_close(HANDLE h)
{
	return CloseHandle(h) ? true : false;
}

bool
file_write_to_file(wchar_t *file, char *buf, int sz)
{
	bool ret;
	HANDLE h;

	h = file_open(file, WO_WRITE | WO_CREAT, 0);
	if (h == INVALID_HANDLE_VALUE) {
		DEBUG(LOG_VERBOSE, "invalid handle value\n");
		return false;
	}
	ret = file_write_all(h, buf, sz);

	file_close(h);

	return ret;
}

int
file_write(HANDLE h, char *buf, int len)
{
	int writed;

	if (!WriteFile(h, buf, len, (LPDWORD)&writed, NULL))
		return -1;
	return writed;
}

bool
file_write_all(HANDLE h, char *buf, int len)
{
	int ret;

	while (len > 0) {
		if((ret = file_write(h, buf, len)) == -1)
			goto error;
		len -= ret;
		buf += ret;
	}
	return true;
error:
	return false;
}

int
file_read(HANDLE h, char *buf, int len)
{
	int readed;

	if (!ReadFile(h, buf, len, (LPDWORD)&readed, NULL))
		return -1;
	DEBUG(LOG_VERBOSE, "readed %d bytes\n", readed);
	return readed;
}

bool
file_read_all(HANDLE h, char *buf, int len)
{
	int ret;

	while (len > 0) {
		if ((ret = file_read(h, buf, len)) == -1)
			goto error;
		len -= ret;
		buf += ret;
	}
	return true;
error:
	return false;
}

bool
file_get_temp_dir(wchar_t *dst, int len)
{
	if (GetTempPath(len, dst) == 0)
		return false;
	else 
		return true;
}

#define RAND_CHARS 7
bool
file_create_temp_file(wchar_t *dst, int dstlen, wchar_t *pref, wchar_t *suf)
{
	HANDLE h;
	wchar_t *cp;
	int preflen, suflen, pathlen;
	int i;

	assert(dst != NULL && dstlen > 0);

	DEBUG(LOG_DEFAULT, "creating temp pref = %s suf = %s\n", 
	    pref == NULL ? L"None" : pref,
	    suf == NULL ? L"None" : suf);

	if (pref == NULL)
		preflen = 0;
	else
		preflen = str_len(pref);
	
	if (suf == NULL)
		suflen = 0;
	else
		suflen = str_len(suf);
	
	cp = dst;
	if (!file_get_temp_dir(cp, dstlen))
		return false;

	pathlen = str_len(cp);
	if (suflen + preflen + pathlen + RAND_CHARS > dstlen)
		return false;

	cp += pathlen;
	if (pref != NULL)
		str_cat(cp, pref);

	for (i = 0; i < RAND_CHARS; i++)
		*cp++ = rand_get_char_printable();
	
	*cp = '\0';
	
	if (suf != NULL)
		str_cat(dst, suf);

	DEBUG(LOG_DEFAULT, "result fname %s\n", dst);

	h = file_open(dst, WO_CREAT | WO_SHARE_R, 0);
	
	return file_close(h);
}

bool
file_delete(wchar_t *fname)
{
	DEBUG(LOG_VERBOSE, "deleting file %s\n", fname);

	return DeleteFile(fname) ? true : false;
}

